/*
CSS属性排序规则
1. 定位属性: position, float, z-index, clear
2. 盒模型相关属性: padding, margin, display, width, height, border
3. 字体相关
4. CSS2 视觉相关属性 (background)
5. CSS3 属性 (border-radius, box-shadow)
*/

html {
	box-sizing: border-box; /*设定 html 为 border-box*/
}

*, *:before, *:after {
    box-sizing: inherit; /*其他元素基础父元素的 box-sizing 属性*/
}

/*便于以后通过继承来切换 box-sizing*/
/*.use-content-box {
    box-sizing: content-box;
}*/

body { /*固定背景*/
	background-image: url(http://uploads.striking.ly/page/images/backgrounds/bg5.jpg);
	background-attachment: fixed;
	background-size: cover;
	background-position: center;

	font-family: 'Open Sans','helvetica',arial,sans-serif;
  	font-weight: 300;
  	color: #62686f;
}

h1, h2, h3, h4, h5, h6 {
    color: #333;
    font-weight: 300;
}

h1 {
	margin-bottom: 20px;
	font-size: 50px;
	font-family: 'Open Sans','helvetica',arial,sans-serif;
	text-shadow: 0 1px rgba(0,0,0,0.3);
	color: #fff;
}

/*外围容器有两个好处：
容器里块元素的宽度默认是外围容器的宽度
调整外围容器就会调整所有内部元素的宽度
*/
.container { /*居中容器，居中外包围框*/
	margin: 0 auto; /*让浏览器自动计算左右 margin，使外包围框居中。这个居中技巧只限于有设置宽度的容器。*/
	width: 960px;
}

.main-header { /*实现头部容器*/
	padding: 1px; /*解决 margin collapse 的问题*/
	/*因为容器本身的 margin-top 会和第一个子元素的 margin-top 折叠在一起。
	在容器和 top 这个字符之间的空白其实是 子元素的 margin-top。
	同样的，父元素的 margin-bottom 会和最后一个子元素的 margin-bottom 也折叠一起了。*/
	margin-top: 100px; /*善用margin调整间隔*/
	background-image: url(../img/banner.jpg);
	text-align: center; /*横向居中，居中行元素*/
}

.main-header__avatar {
	display: block;
	margin: 0 auto; /*横向居中，居中块元素，元素一定要有 width 属性*/
	margin-top: -70px; /*将元素向上拉*/
	margin-bottom: 10px;
	border: 3px solid white; 
	border-radius: 999px; /*把头像变成圆形*/

	box-shadow: 0 0px 2px 1px rgba(0,0,0,0.2); /*给头像加阴影*/
}

.main-nav {
	background-color: #333;
	text-align: center; /*横向居中，居中行元素*/
}

.main-nav ul {
	list-style: none; /*去掉列表装饰*/
	padding: 0; /*清除浏览器默认的间隔*/
	margin: 0; /*清除浏览器默认的间隔*/
}

.main-nav ul li {
	display: inline-block; /*变li为行元素*/
	/*因为 inline 元素只能设置其左右内边距和外边距，而不能设置其高度和上下内外边距。
	和垂直高度有关的 padding, margin, height 都无效。
	这时可以使用 display: inline-block。
	inline-block 元素可以简单理解为对外表现为行元素，而对内表现为块元素。
	
	上下 padding, margin 有效
	容器的 text-align 会对它居中*/
	margin: 15px 10px; /*上下15px，左右10px*/
}

.main-nav ul li a {
	color: #fff;
	font-size: 0.9rem;
	font-weight: 300;
	text-transform: uppercase;
	text-decoration: none;
}

.main-nav ul li a:hover {
	text-decoration: underline;
}

.info-section {
	padding: 1px; /*解决 margin collapse 的问题*/
	padding: 30px 60px;
	text-align: center;
	background-color: #fff;
}

.info-section header h2 {
	font-size: 28px;
	text-transform: uppercase;
	letter-spacing: 3px;
}

.info-section__description {
	margin-bottom: 60px; /*调整标题和内容的边距*/
	font-style: italic;
}

.whatido__skill {
	padding-top: 100px; /*元素内部确保住够的空间完整地显示背景图*/
    background-repeat: no-repeat; /*禁止背景图重复*/
    background-position: center top; /*居中背景图*/
}

.whatido__skill-list {
    overflow: hidden; /*用 Float 布局来占满父容器的宽度*/
	padding: 0; /*清除浏览器默认的间隔*/
	margin: 0; /*清除浏览器默认的间隔*/
	list-style: none; /*去掉列表装饰*/
}

/*方案2: CSS 设计模型 - 取代 overflow 用 clear 撑高容器
content:"" 在 clearfix 这个元素之后加上一个空的伪元素
clear:both 使伪元素清除飘动元素*/

/*.clearfix:after {
    content: "";
    display: table;
    clear: both;
}*/

/*关于布局: 如果你的布局对空白不敏感 （比如我们之前实现的导航），那么你可以选用 inline-block
对空白敏感的布局 （分栏，grid）请用 float*/

.whatido__skill--code {
    background-image: url(../img/skill-code.png); /*用 background 来配图*/
    float: left; /*让子元素向左飘动*/
    width: 33%; /*指定子元素的宽度*/
}

.whatido__skill--design {
    background-image: url(../img/skill-design.png);
    float: left; 
    width: 33%; 
}

.whatido__skill--product {
    background-image: url(../img/skill-product.png);
    float: left;
    width: 33%;
}

.info-section header h2:after {
	content: ""; /*在 h2 这个元素之后加上一个空的伪元素*/
	display: block; /*把行元素变成块元素*/
	margin: 15px auto;
	border-bottom: 3px solid black;
	width: 80px;
}

.education-experience__list {
	padding: 0;
	margin: 0; 
	list-style: none;
}

.education-experience__list li {
	/*display: table; /*让 article 内容置顶*/
	margin: 50px 0;
	display: block;
}

.education-experience__list img {
	float: left; /*向左飘动的元素*/
	width: 180px;
}

.education-experience__list article {
	/*display: table-cell; /*让 article 内容置顶*/
	overflow: hidden; /*避免这个容器里面的文字包围容器外面的浮动元素*/
	padding-left: 40px; /*图片和文字之间设定间隔*/
	text-align: left;
	/*vertical-align: top; /*让 article 内容置顶*/
}

.photos__list,
.get-in-touch__list {
	overflow: hidden;
	padding: 0;
	margin: 0; 
	list-style: none;
}

.get-in-touch__list {
	margin-top: 70px;
}

.photos__list li,
.get-in-touch__list li {
	float: left;
	width: 25%;
}

.photos__list img {
	padding: 10;
	width: 100%; /*宽度设定为 100% (即其父容器的宽度)*/
}

.contact input,
.contact textarea {
    border: 1px solid #ccc;
    border-radius: 4px;
}

.contact button {
    border: none;
    border-radius: 9999px;

    background: #ffd524;

    cursor: pointer;
    text-shadow: 0 1px 1px rgba(0,0,0,0.2);
    color: #fff;
    box-shadow: 0 3px 0 #daae1d;
}

/*绝对定位的的适用场景:
有一个主要组件，在文件流里面正常布局；
这个组件有一个附属组件 (它的小伙伴)；
这个附属组件的位置相对于主要组件的位置。
*/
.contact__list {
	position: relative;
	padding: 0;
	margin-top: 70; 
	list-style: none;
}

.contact__list li {
	margin: 20px;
}

.contact__list label {
	position: absolute;
	right: 68%; /*这里的百分比（%）是父容器高和宽的百分比*/
}

.contact input,
.contact textarea,
.contact button {
	width: 30%; /*指定元素的宽度为父容器的宽度*/
}

/*box model*/
/*http://www.w3.org/TR/WD-CSS2-971104/images/boxdim.gif*/

@media only screen and (max-width: 480px) {
	.container {
		width: 100%; /*480以下的屏幕设定外围容器的宽度为 100%*/
	}
	h1 {
		font-size: 32px;
	}
	.main-nav ul li {
		display: block;
		margin: 0;
		padding: 10px;
	}
    .whatido__skill {
        display: block;
        width: 100%;
    }
    .education-experience__list img {
    	float: none;
    	width: 180px;
    }
    .education-experience__list article {
    	padding-left: 0;
    	text-align: center;
    }
    .photos__list li,
    .get-in-touch__list li {
		float: none;
    	width: 100%;
	}
	.contact label {
		position: static;
	}
	.contact input,
	.contact textarea,
	.contact button {
		width: 100%; 
	}
}